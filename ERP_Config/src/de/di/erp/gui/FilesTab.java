/*
 * LoggingPanel.java
 *
 * Created on 2. Mai 2008, 11:43
 */
package de.di.erp.gui;

import de.di.erp.gui.Config.Property;
import de.di.erpgui.printers.ELOPrinter;
import de.di.erpgui.printers.Printer;
import java.awt.event.ItemEvent;
import java.io.File;
import javax.swing.event.DocumentEvent;
import org.apache.log4j.Level;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentListener;

/**
 *
 * @author  A. Sopicki
 */
public class FilesTab extends javax.swing.JPanel implements ConfigTab, DocumentListener {

    private Config config = null;

    private LogLevel[] levelItems = new LogLevel[4];

    private Printer[] supportedPrinters = new Printer[1];

    private boolean setup = false;

    private String title = "Files";

    /** Creates new form LoggingPanel */
    public FilesTab() {
        supportedPrinters[0] = new ELOPrinter();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.
            getInstance(de.di.erp.gui.ERPGUIApp.class).getContext().
            getResourceMap(FilesTab.class);
        
        title = resourceMap.getString("tabTitle.text");

        levelItems[0] = new LogLevel(Level.WARN, LogLevel.Type.STANDARD);
        levelItems[1] = new LogLevel(Level.WARN, LogLevel.Type.WARN);
        levelItems[2] = new LogLevel(Level.INFO, LogLevel.Type.INFO);
        levelItems[3] = new LogLevel(Level.ALL, LogLevel.Type.ALL);

        initComponents();

        this.eloURLTextBox.getDocument().addDocumentListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        templateFileTextField = new javax.swing.JTextField();
        templateFileButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        logLevelComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        makeBackupCheckBox = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        eloURLLabel = new javax.swing.JLabel();
        eloURLTextBox = new javax.swing.JTextField();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(FilesTab.class);
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel3.border.title"))); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        templateFileTextField.setEditable(false);
        templateFileTextField.setText(resourceMap.getString("templateFileTextField.text")); // NOI18N
        templateFileTextField.setName("templateFileTextField"); // NOI18N

        templateFileButton.setText(resourceMap.getString("templateFileButton.text")); // NOI18N
        templateFileButton.setName("templateFileButton"); // NOI18N
        templateFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateFileButtonActionPerformed(evt);
            }
        });

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        logLevelComboBox.setModel(new DefaultComboBoxModel(levelItems));
        logLevelComboBox.setName("logLevelComboBox"); // NOI18N
        logLevelComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                logLevelComboBoxItemStateChanged(evt);
            }
        });

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        makeBackupCheckBox.setText(resourceMap.getString("makeBackupCheckBox.text")); // NOI18N
        makeBackupCheckBox.setName("makeBackupCheckBox"); // NOI18N
        makeBackupCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeBackupCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4))
                .addGap(41, 41, 41)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(templateFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(makeBackupCheckBox))
                .addGap(18, 18, 18)
                .addComponent(templateFileButton)
                .addContainerGap(120, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(templateFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(templateFileButton))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(makeBackupCheckBox)
                    .addComponent(jLabel4))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel7, logLevelComboBox});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel3, templateFileButton, templateFileTextField});

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel4.border.title"))); // NOI18N
        jPanel4.setName("jPanel4"); // NOI18N

        eloURLLabel.setText(resourceMap.getString("eloURLLabel.text")); // NOI18N
        eloURLLabel.setName("eloURLLabel"); // NOI18N

        eloURLTextBox.setText(resourceMap.getString("eloURLTextBox.text")); // NOI18N
        eloURLTextBox.setName("eloURLTextBox"); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eloURLLabel)
                .addGap(63, 63, 63)
                .addComponent(eloURLTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(217, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(eloURLTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eloURLLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(348, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void templateFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_templateFileButtonActionPerformed
    File f = null;
    String filename = config.getProperty(Property.DirectoriesTemplate);

    if (filename != null) {
        f = new File(filename);
    }
    JFileChooser fileChooser = new JFileChooser();

    if (f != null && f.exists() && f.getParentFile() != null) {
        fileChooser.setCurrentDirectory(f);
    }
    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    int result = fileChooser.showOpenDialog(this);

    if (result == JFileChooser.APPROVE_OPTION) {
        f = fileChooser.getSelectedFile();
        templateFileTextField.setText(f.getName());
        config.setProperty(Property.DefaultTemplate, f.getName());
    }
}//GEN-LAST:event_templateFileButtonActionPerformed

private void logLevelComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_logLevelComboBoxItemStateChanged
    if (evt.getStateChange() == ItemEvent.SELECTED && !setup) {
        LogLevel logLevel = (LogLevel) evt.getItem();
        config.setProperty(Property.BasicLogLevel, logLevel.getLevel().toString());
    }
}//GEN-LAST:event_logLevelComboBoxItemStateChanged

private void makeBackupCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeBackupCheckBoxActionPerformed
  if ( setup )
        return;

    if ( makeBackupCheckBox.isSelected() ) {
        config.setProperty(Property.ParsingMakeBackup, "TRUE");
    } else {
        config.setProperty(Property.ParsingMakeBackup, "FALSE");
    }
}//GEN-LAST:event_makeBackupCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel eloURLLabel;
    private javax.swing.JTextField eloURLTextBox;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JComboBox logLevelComboBox;
    private javax.swing.JCheckBox makeBackupCheckBox;
    private javax.swing.JButton templateFileButton;
    private javax.swing.JTextField templateFileTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public JPanel getJPanel() {
        return this;
    }

    @Override
    public String getTitle() {
        return title;
    }

    @Override
    public void setConfig(Config c) {
        config = c;

        setup = true;

//        logFileCountComboBox.setSelectedItem(config.getProperty(
//                                             Property.BasicMaxLogFiles, "3"));

        int i = 10485760;
        
//        logFileSizeSpinner.setValue(i);



        templateFileTextField.setText(config.getProperty(
                                      Property.DefaultTemplate));

        Level logLevel = levelItems[0].getLevel();
        try {
            logLevel = Level.toLevel(config.getProperty(Property.BasicLogLevel),Level.WARN);
        } catch (Exception ex) {
        }

        for (i = 0; i < levelItems.length; i++) {
            if (logLevel == levelItems[i].getLevel()) {
                logLevelComboBox.setSelectedIndex(i);
                break;
            }
        }

        if (i == levelItems.length) {
            levelItems = java.util.Arrays.copyOf(levelItems, levelItems.length +
                                                 1);
            levelItems[levelItems.length - 1] = new LogLevel(logLevel, LogLevel.Type.EXPERT);
            logLevelComboBox.setModel(new DefaultComboBoxModel(levelItems));
            logLevelComboBox.setSelectedIndex(levelItems.length - 1);
        }
        
        eloURLTextBox.setText(config.getProperty(Property.IndexServerURL, ""));

        boolean makeBackup = Boolean.parseBoolean(
                config.getProperty(Property.ParsingMakeBackup, "TRUE"));

        makeBackupCheckBox.setSelected(makeBackup);

        setup = false;
    }

  @Override
  public void insertUpdate(DocumentEvent e) {
    if ( !setup ) {
      config.setProperty(Property.IndexServerURL, eloURLTextBox.getText());
    }
  }

  @Override
  public void removeUpdate(DocumentEvent e) {
    if ( !setup ) {
      config.setProperty(Property.IndexServerURL, eloURLTextBox.getText());
    }
  }

  @Override
  public void changedUpdate(DocumentEvent e) {
  }
}
