package de.di.erp.gui;

import java.io.File;
import java.util.ResourceBundle;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;

/**
 *
 * @author  A. Sopicki
 */
public class GeneralTab extends javax.swing.JPanel implements ConfigTab {

    private Config config = null;
    private boolean setup = false;
    private String title = "General";
    private File lastDirectory = null;
    private ResourceMap resourceMap;

    /** Creates new form GeneralTab */
    public GeneralTab() {
        resourceMap = org.jdesktop.application.Application.getInstance(de.di.erp.gui.ERPGUIApp.class).getContext().
                getResourceMap(GeneralTab.class);

        title = resourceMap.getString("tabTitle.text");

        initComponents();


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        errorOutputDirectoryButton = new javax.swing.JButton();
        inputDirectoryTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        backupDirectoryButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        inputDirectoryButton = new javax.swing.JButton();
        templateDirectoryButton = new javax.swing.JButton();
        backupDirectoryTextField = new javax.swing.JTextField();
        templateDirectoryTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        errorOutputDirectoryTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        outputDirectoryTextField = new javax.swing.JTextField();
        outputDirectoryButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        logDirectoryTextField = new javax.swing.JTextField();
        logDirectoryButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        workDirectoryTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        activeButton = new javax.swing.JToggleButton();
        serviceLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        statusButton = new javax.swing.JButton();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(GeneralTab.class);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        errorOutputDirectoryButton.setText(resourceMap.getString("errorOutputDirectoryButton.text")); // NOI18N
        errorOutputDirectoryButton.setName("errorOutputDirectoryButton"); // NOI18N
        errorOutputDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorOutputDirectoryButtonActionPerformed(evt);
            }
        });

        inputDirectoryTextField.setEditable(false);
        inputDirectoryTextField.setMargin(new java.awt.Insets(0, 2, 2, 0));
        inputDirectoryTextField.setName("inputDirectoryTextField"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        backupDirectoryButton.setText(resourceMap.getString("backupDirectoryButton.text")); // NOI18N
        backupDirectoryButton.setName("backupDirectoryButton"); // NOI18N
        backupDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupDirectoryButtonActionPerformed(evt);
            }
        });

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        inputDirectoryButton.setText(resourceMap.getString("inputDirectoryButton.text")); // NOI18N
        inputDirectoryButton.setName("inputDirectoryButton"); // NOI18N
        inputDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputDirectoryButtonActionPerformed(evt);
            }
        });

        templateDirectoryButton.setText(resourceMap.getString("templateDirectoryButton.text")); // NOI18N
        templateDirectoryButton.setName("templateDirectoryButton"); // NOI18N
        templateDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateDirectoryButtonActionPerformed(evt);
            }
        });

        backupDirectoryTextField.setEditable(false);
        backupDirectoryTextField.setMargin(new java.awt.Insets(0, 2, 2, 0));
        backupDirectoryTextField.setName("backupDirectoryTextField"); // NOI18N

        templateDirectoryTextField.setEditable(false);
        templateDirectoryTextField.setText(resourceMap.getString("templateDirectoryTextField.text")); // NOI18N
        templateDirectoryTextField.setMargin(new java.awt.Insets(0, 2, 2, 0));
        templateDirectoryTextField.setName("templateDirectoryTextField"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        errorOutputDirectoryTextField.setEditable(false);
        errorOutputDirectoryTextField.setMargin(new java.awt.Insets(0, 2, 2, 0));
        errorOutputDirectoryTextField.setName("errorOutputDirectoryTextField"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        outputDirectoryTextField.setEditable(false);
        outputDirectoryTextField.setMargin(new java.awt.Insets(0, 2, 2, 0));
        outputDirectoryTextField.setName("outputDirectoryTextField"); // NOI18N

        outputDirectoryButton.setText(resourceMap.getString("outputDirectoryButton.text")); // NOI18N
        outputDirectoryButton.setName("outputDirectoryButton"); // NOI18N
        outputDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputDirectoryButtonActionPerformed(evt);
            }
        });

        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        logDirectoryTextField.setEditable(false);
        logDirectoryTextField.setMargin(new java.awt.Insets(0, 2, 2, 0));
        logDirectoryTextField.setName("logDirectoryTextField"); // NOI18N

        logDirectoryButton.setText(resourceMap.getString("logDirectoryButton.text")); // NOI18N
        logDirectoryButton.setName("logDirectoryButton"); // NOI18N
        logDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logDirectoryButtonActionPerformed(evt);
            }
        });

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/di/erp/gui/resources/GeneralTab"); // NOI18N
        jLabel6.setText(bundle.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        workDirectoryTextField.setBackground(resourceMap.getColor("workDirectoryTextField.background")); // NOI18N
        workDirectoryTextField.setEditable(false);
        workDirectoryTextField.setText(resourceMap.getString("workDirectoryTextField.text")); // NOI18N
        workDirectoryTextField.setName("workDirectoryTextField"); // NOI18N

        jButton1.setText(bundle.getString("workDirectoryButton.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel12)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(workDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorOutputDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(templateDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backupDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButton1)
                    .addComponent(logDirectoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(errorOutputDirectoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(templateDirectoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backupDirectoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outputDirectoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputDirectoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(121, 121, 121))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {backupDirectoryTextField, errorOutputDirectoryTextField, inputDirectoryTextField, logDirectoryTextField, outputDirectoryTextField, templateDirectoryTextField});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {backupDirectoryButton, errorOutputDirectoryButton, inputDirectoryButton, logDirectoryButton, outputDirectoryButton, templateDirectoryButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(inputDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputDirectoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(outputDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputDirectoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(backupDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backupDirectoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(templateDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(templateDirectoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel5)
                    .addComponent(errorOutputDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorOutputDirectoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel12)
                    .addComponent(logDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logDirectoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(jButton1)
                    .addComponent(workDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {backupDirectoryButton, backupDirectoryTextField, errorOutputDirectoryButton, errorOutputDirectoryTextField, inputDirectoryButton, inputDirectoryTextField, jLabel1, jLabel12, jLabel2, jLabel3, jLabel4, jLabel5, logDirectoryButton, logDirectoryTextField, outputDirectoryButton, outputDirectoryTextField, templateDirectoryButton, templateDirectoryTextField});

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(GeneralTab.class, this);
        activeButton.setAction(actionMap.get("toggleService")); // NOI18N
        activeButton.setText(resourceMap.getString("activeButton.text")); // NOI18N
        activeButton.setName("activeButton"); // NOI18N

        serviceLabel.setText(resourceMap.getString("serviceLabel.text")); // NOI18N
        serviceLabel.setName("serviceLabel"); // NOI18N

        statusLabel.setText(resourceMap.getString("statusLabel.text")); // NOI18N
        statusLabel.setName("statusLabel"); // NOI18N

        statusButton.setAction(actionMap.get("showStatus")); // NOI18N
        statusButton.setName("statusButton"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serviceLabel)
                    .addComponent(statusLabel))
                .addGap(96, 96, 96)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusButton, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(activeButton))
                .addGap(455, 455, 455))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {activeButton, statusButton});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(activeButton)
                    .addComponent(serviceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusButton)
                    .addComponent(statusLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(102, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void inputDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputDirectoryButtonActionPerformed
    File f = getSelectedDirectory(config.getProperty(
            Config.Property.DirectoriesInput));
    ResourceBundle bundle = ResourceBundle.getBundle(
            "de/di/erp/gui/resources/ERPGUIApp");
    if (f != null) {
        try {
            if (!f.exists()) {
                throw new Exception(bundle.getString("missingDircetory.text"));
            }

            if (!f.canWrite()) {
                throw new Exception(bundle.getString("noWriteAccess.text"));
            }

            if (!f.canRead()) {
                throw new Exception(bundle.getString("noReadAccess.text"));
            }
            inputDirectoryTextField.setText(f.getAbsolutePath());
            config.setProperty(Config.Property.DirectoriesInput, f.getAbsolutePath());
            lastDirectory = f;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    bundle.getString("errorDialogTitle.text"),
                    JOptionPane.ERROR_MESSAGE);
        }
    }
}//GEN-LAST:event_inputDirectoryButtonActionPerformed

private void outputDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputDirectoryButtonActionPerformed
    File f = getSelectedDirectory(config.getProperty(
            Config.Property.DirectoriesOutput));
    ResourceBundle bundle = ResourceBundle.getBundle(
            "de/di/erp/gui/resources/ERPGUIApp");
    if (f != null) {
        try {
            if (!f.exists()) {
                throw new Exception(bundle.getString("missingDircetory.text"));
            }

            if (!f.canWrite()) {
                throw new Exception(bundle.getString("noWriteAccess.text"));
            }

            if (!f.canRead()) {
                throw new Exception(bundle.getString("noReadAccess.text"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    bundle.getString("errorDialogTitle.text"),
                    JOptionPane.ERROR_MESSAGE);
        }
        outputDirectoryTextField.setText(f.getAbsolutePath());
        config.setProperty(Config.Property.DirectoriesOutput, f.getAbsolutePath());
        lastDirectory = f;
    }
}//GEN-LAST:event_outputDirectoryButtonActionPerformed

private void backupDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupDirectoryButtonActionPerformed
    File f = getSelectedDirectory(config.getProperty(
            Config.Property.DirectoriesBackup));
    ResourceBundle bundle = ResourceBundle.getBundle(
            "de/di/erp/gui/resources/ERPGUIApp");
    if (f != null) {
        try {
            if (!f.exists()) {
                throw new Exception(bundle.getString("missingDircetory.text"));
            }

            if (!f.canWrite()) {
                throw new Exception(bundle.getString("noWriteAccess.text"));
            }

            if (!f.canRead()) {
                throw new Exception(bundle.getString("noReadAccess.text"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    bundle.getString("errorDialogTitle.text"),
                    JOptionPane.ERROR_MESSAGE);
        }
        backupDirectoryTextField.setText(f.getAbsolutePath());
        config.setProperty(Config.Property.DirectoriesBackup,
                f.getAbsolutePath());
        lastDirectory = f;
    }
}//GEN-LAST:event_backupDirectoryButtonActionPerformed

private void templateDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_templateDirectoryButtonActionPerformed
    File f = getSelectedDirectory(config.getProperty(
            Config.Property.DirectoriesTemplate));
    ResourceBundle bundle = ResourceBundle.getBundle(
            "de/di/erp/gui/resources/ERPGUIApp");
    if (f != null) {
        try {
            if (!f.exists()) {
                throw new Exception(bundle.getString("missingDircetory.text"));
            }

            if (!f.canWrite()) {
                throw new Exception(bundle.getString("noWriteAccess.text"));
            }

            if (!f.canRead()) {
                throw new Exception(bundle.getString("noReadAccess.text"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    bundle.getString("errorDialogTitle.text"),
                    JOptionPane.ERROR_MESSAGE);
        }
        templateDirectoryTextField.setText(f.getAbsolutePath());
        config.setProperty(Config.Property.DirectoriesTemplate,
                f.getAbsolutePath());
        lastDirectory = f;
    }
}//GEN-LAST:event_templateDirectoryButtonActionPerformed

private void errorOutputDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorOutputDirectoryButtonActionPerformed
    File f = getSelectedDirectory(config.getProperty(
            Config.Property.DirectoriesErrorOutput));
    ResourceBundle bundle = ResourceBundle.getBundle(
            "de/di/erp/gui/resources/ERPGUIApp");
    if (f != null) {
        try {
            if (!f.exists()) {
                throw new Exception(bundle.getString("missingDircetory.text"));
            }

            if (!f.canWrite()) {
                throw new Exception(bundle.getString("noWriteAccess.text"));
            }

            if (!f.canRead()) {
                throw new Exception(bundle.getString("noReadAccess.text"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    bundle.getString("errorDialogTitle.text"),
                    JOptionPane.ERROR_MESSAGE);
        }
        errorOutputDirectoryTextField.setText(f.getAbsolutePath());
        config.setProperty(Config.Property.DirectoriesErrorOutput,
                f.getAbsolutePath());
        lastDirectory = f;
    }
}//GEN-LAST:event_errorOutputDirectoryButtonActionPerformed

private void logDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logDirectoryButtonActionPerformed
    File f = getSelectedDirectory(config.getProperty(
            Config.Property.DirectoriesLogging));
    ResourceBundle bundle = ResourceBundle.getBundle(
            "de/di/erp/gui/resources/ERPGUIApp");
    if (f != null) {
        try {
            if (!f.exists()) {
                throw new Exception(bundle.getString("missingDircetory.text"));
            }

            if (!f.canWrite()) {
                throw new Exception(bundle.getString("noWriteAccess.text"));
            }

            if (!f.canRead()) {
                throw new Exception(bundle.getString("noReadAccess.text"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    bundle.getString("errorDialogTitle.text"),
                    JOptionPane.ERROR_MESSAGE);
        }
        logDirectoryTextField.setText(f.getAbsolutePath());
        config.setProperty(Config.Property.DirectoriesLogging,
                f.getAbsolutePath());
        lastDirectory = f;
    }
}//GEN-LAST:event_logDirectoryButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        File f = getSelectedDirectory(config.getProperty(
                Config.Property.DirectoriesErrorOutput));
        ResourceBundle bundle = ResourceBundle.getBundle(
                "de/di/erp/gui/resources/ERPGUIApp");
        if (f != null) {
            try {
                if (!f.exists()) {
                    throw new Exception(bundle.getString("missingDircetory.text"));
                }

                if (!f.canWrite()) {
                    throw new Exception(bundle.getString("noWriteAccess.text"));
                }

                if (!f.canRead()) {
                    throw new Exception(bundle.getString("noReadAccess.text"));
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage(),
                        bundle.getString("workDialogTitle.text"),
                        JOptionPane.ERROR_MESSAGE);
            }
            workDirectoryTextField.setText(f.getAbsolutePath());
            config.setProperty(Config.Property.DirectoriesWorking,
                    f.getAbsolutePath());
            lastDirectory = f;
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton activeButton;
    private javax.swing.JButton backupDirectoryButton;
    private javax.swing.JTextField backupDirectoryTextField;
    private javax.swing.JButton errorOutputDirectoryButton;
    private javax.swing.JTextField errorOutputDirectoryTextField;
    private javax.swing.JButton inputDirectoryButton;
    private javax.swing.JTextField inputDirectoryTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton logDirectoryButton;
    private javax.swing.JTextField logDirectoryTextField;
    private javax.swing.JButton outputDirectoryButton;
    private javax.swing.JTextField outputDirectoryTextField;
    private javax.swing.JLabel serviceLabel;
    private javax.swing.JButton statusButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton templateDirectoryButton;
    private javax.swing.JTextField templateDirectoryTextField;
    private javax.swing.JTextField workDirectoryTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public JPanel getJPanel() {
        return this;
    }

    @Override
    public String getTitle() {
        return title;
    }

    @Override
    public void setConfig(Config c) {
        config = c;

        setup = true;

        inputDirectoryTextField.setText(c.getProperty(
                Config.Property.DirectoriesInput));
        outputDirectoryTextField.setText(c.getProperty(
                Config.Property.DirectoriesOutput));
        backupDirectoryTextField.setText(c.getProperty(
                Config.Property.DirectoriesBackup));
        templateDirectoryTextField.setText(c.getProperty(
                Config.Property.DirectoriesTemplate));
        errorOutputDirectoryTextField.setText(
                c.getProperty(Config.Property.DirectoriesErrorOutput));
        logDirectoryTextField.setText(c.getProperty(
                Config.Property.DirectoriesLogging));
        workDirectoryTextField.setText(c.getProperty(Config.Property.DirectoriesWorking));
        int queueSize = 0;
        try {
            queueSize = Integer.parseInt(config.getProperty(
                    Config.Property.BasicQueueSize, "30"));
        } catch (Exception e) {
        }

        PerformanceLevel levels[] = new PerformanceLevel[4];
        levels[0] = new PerformanceLevel(PerformanceLevel.Level.STANDARD);
        levels[1] = new PerformanceLevel(PerformanceLevel.Level.MINIMUM);
        levels[2] = new PerformanceLevel(PerformanceLevel.Level.FAST);
        levels[3] = new PerformanceLevel(PerformanceLevel.Level.MAXIMUM);

//        performanceLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel(levels));

        if (queueSize == 30) {
//            performanceLevelComboBox.setSelectedItem(levels[0]);
        } else if (queueSize == 10) {
//            performanceLevelComboBox.setSelectedItem(levels[1]);
        } else if (queueSize == 60) {
//            performanceLevelComboBox.setSelectedItem(levels[2]);
        } else if (queueSize == 100) {
//            performanceLevelComboBox.setSelectedItem(levels[3]);
        } else {
            levels = new PerformanceLevel[5];
            levels[0] = new PerformanceLevel(PerformanceLevel.Level.STANDARD);
            levels[1] = new PerformanceLevel(PerformanceLevel.Level.MINIMUM);
            levels[2] = new PerformanceLevel(PerformanceLevel.Level.FAST);
            levels[3] = new PerformanceLevel(PerformanceLevel.Level.MAXIMUM);
            levels[4] = new PerformanceLevel(PerformanceLevel.Level.EXPERT);

//            performanceLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel(levels));
//            performanceLevelComboBox.setSelectedItem(levels[5]);
        }

        boolean newInstall = Boolean.parseBoolean(
                config.getProperty(Config.Property.BasicNewInstall, "TRUE"));

        activeButton.setSelected(!newInstall);

        if (newInstall) {
            activeButton.setText(resourceMap.getString("toggleService.Action.Inactive.text"));
        } else {
            activeButton.setText(resourceMap.getString("toggleService.Action.text"));
        }

        setup = false;
    }

    private File getSelectedDirectory(String filename) {
        File f = null;

        if (filename != null) {
            f = new File(filename);
        }
        JFileChooser fileChooser = new JFileChooser();

        if (f != null && f.exists()) {
            fileChooser.setCurrentDirectory(f);
        } else if (lastDirectory != null) {
            fileChooser.setCurrentDirectory(lastDirectory);
        }
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile();
        }

        return null;
    }

    @Action
    public void toggleService() {
        boolean newInstall = !activeButton.isSelected();

        if (newInstall) {
            int result = JOptionPane.showConfirmDialog(
                    this,
                    resourceMap.getString("toggleService.Deactivate.Confirm.text"),
                    resourceMap.getString("toggleService.Deactivate.Confirm.title"),
                    JOptionPane.WARNING_MESSAGE);

            if (result != JOptionPane.YES_OPTION) {
                activeButton.setSelected(true); //reset state
                return;
            }

            activeButton.setText(resourceMap.getString("toggleService.Action.Inactive.text"));
        } else {
            activeButton.setText(resourceMap.getString("toggleService.Action.text"));
        }
        config.setProperty(Config.Property.BasicNewInstall, Boolean.toString(newInstall));
    }

    @Action
    public void showStatus() {
        String uri = config.getProperty(Config.Property.BasicTomcatURL, "")
                + config.getProperty(Config.Property.BasicServiceName, "") + "/";

        java.net.URI serviceURI;

        try {
            serviceURI = new java.net.URI(uri);
            java.awt.Desktop.getDesktop().browse(serviceURI);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    this,
                    resourceMap.getString("showStatus.Error.text"),
                    resourceMap.getString("showStatus.Error.title"),
                    JOptionPane.ERROR_MESSAGE);
        }
    }
}
